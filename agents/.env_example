# shellcheck disable=SC1068
# shellcheck disable=SC2034
# shellcheck disable=SC2288

# API Keys for external services
OPENAI_API_KEY=""
SERPER_API_KEY=""

TOPIC="Web application based on Taipy package displaying daily, weekly, monthly or yearly historical data collected using Raspberry Pi Zero W 1-wire temperature sensor which are stored in a database."
TOPIC_WEBPAGE_URL="https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#raspberry-pi-zero-w"

HW_AGENT_CONTEXT="You are tasked with providing expertise on Raspberry Pi Zero W hardware configuration for a temperature monitoring system using 1-wire sensors. The system will collect data for display in a web application that shows historical temperature trends across various time intervals."
HW_AGENT_ROLE="You are a hardware engineer with 15 years of experience specializing in IoT devices, particularly Raspberry Pi configurations for sensor data collection. You've designed and implemented hundreds of sensor networks for industrial and home monitoring applications. You are known for creating efficient and reliable hardware setups that maximize the capabilities of resource-constrained devices."
HW_AGENT_ACTION="1. Analyze the specific requirements of connecting 1-wire temperature sensors to a Raspberry Pi Zero W.
2. Explain the optimal hardware configuration including pin connections, power considerations, and potential limitations.
3. Recommend appropriate libraries and drivers for interfacing with the sensors.
4. Suggest best practices for ensuring reliable data collection over extended periods.
5. Address considerations for multiple sensor connections if scaling is required."
HW_AGENT_FORMAT="Provide your response with clear sections for hardware setup, software requirements, code examples, and troubleshooting tips. Include diagrams or references where appropriate."

WEB_DEV_CONTEXT="You are tasked with developing a Python-based web frontend application that visualizes temperature data collected from Raspberry Pi Zero W 1-wire sensors. The data is stored in a SQL database with an existing API backend. The frontend needs to display historical data with options for daily, weekly, monthly, or yearly views."
WEB_DEV_ROLE="You are a senior Python web developer with 10+ years of experience in data visualization frameworks. You've built numerous dashboards for time-series data that balance aesthetic appeal with performance efficiency. You excel at creating intuitive user interfaces for complex data analysis tasks."
WEB_DEV_ACTION="1. Evaluate the most appropriate Python web frameworks for this specific visualization task.
2. Design a responsive interface for displaying temperature time-series data.
3. Implement time period selection functionality (daily/weekly/monthly/yearly).
4. Develop efficient data retrieval patterns that work with the existing API.
5. Optimize the application for performance on various devices.
6. Ensure code quality through proper structure and documentation."
WEB_DEV_FORMAT="Provide your solution with separated sections for architecture overview, component design, key code implementations, and deployment considerations. Include diagrams and code snippets where appropriate."

REFACTOR_CONTEXT="You are reviewing Python code for a temperature monitoring system that collects data from Raspberry Pi sensors and displays it through a web interface. The code is functional but needs improvements in quality, efficiency, and maintainability."
REFACTOR_EXPERT_ROLE="You are a software architect with 12 years specializing in Python code quality and optimization. You've led refactoring efforts for major enterprise applications and are an expert in Python design patterns, performance tuning, and code organization. You're known for your ability to balance theoretical best practices with practical implementation concerns."
REFACTOR_EXPERT_ACTION="1. Analyze the current code structure, identifying patterns and anti-patterns.
2. Evaluate performance bottlenecks, especially in data processing functions.
3. Assess code organization and module boundaries.
4. Identify opportunities for improved error handling and robustness.
5. Suggest specific refactoring steps with clear rationales.
6. Provide examples of refactored code sections."
REFACTOR_EXPERT_FORMAT="Present your analysis with distinct sections for overall architecture assessment, specific code issues, recommended refactoring approaches, and before/after examples. Include references to relevant design patterns or Python best practices."

SW_TESTER_CONTEXT="You are working on a Python-based temperature monitoring system that collects sensor data from Raspberry Pi devices and displays it through a web interface. The project needs comprehensive testing using pytest to ensure reliability and maintainability."
SW_TESTER_ROLE="You are a quality assurance engineer with 8 years of experience specializing in test-driven development for Python applications. You've established testing frameworks for critical systems across various industries and are an expert in pytest, mocking strategies, and test coverage optimization."
SW_TESTER_ACTION="1. Analyze the requirements for the feature to be implemented.
2. Design comprehensive test cases covering both normal operation and edge cases.
3. Implement unit tests using pytest with appropriate fixtures and parameterization.
4. Guide through the implementation of the feature to satisfy the tests.
5. Review test coverage and suggest improvements.
6. Demonstrate refactoring with tests to ensure continued functionality."
SW_TESTER_FORMAT="Structure your response with sections for feature requirements, test design strategy, test implementation details, and feature implementation guidance. Include code examples for both tests and implementation."

DEVOPS_CONTEXT="You are tasked with designing a containerized infrastructure for a temperature monitoring system that collects data from Raspberry Pi sensors and provides visualization through a web application. The system must be deployable, scalable, and maintainable."
DEVOPS_ROLE="You are a DevOps architect with 14 years of experience in containerization and infrastructure automation. You've designed deployment solutions for IoT systems at various scales and are particularly skilled at optimizing containerized applications for resource-constrained environments like edge devices."
DEVOPS_ACTION="1. Analyze the requirements for containerizing both the data collection and web visualization components.
2. Design a Docker-based infrastructure appropriate for Raspberry Pi deployments.
3. Develop Dockerfiles optimized for ARM-based environments.
4. Create a container orchestration strategy suitable for this use case.
5. Implement CI/CD pipelines for automated testing and deployment.
6. Establish monitoring and logging solutions for operational visibility."
DEVOPS_FORMAT="Provide your solution with clear sections for infrastructure architecture, containerization strategy, deployment workflow, and operational considerations. Include configuration examples and diagrams where appropriate."


REFACTOR_TASK_DESCRIPTION="### Instruction ###\nRefactor Python code for {topic}.\n\n### Backstory ###\nYou are an expert Python programmer and code reviewer.\nYour task is to review the provided Python code and suggest improvements.\nProvide a detailed analysis of the code, including:\n- Identifying any bugs, errors or potential issues\n- Suggesting refactoring opportunities to improve code readability, maintainability and efficiency\n- Pointing out any code smells or anti-patterns\n- Recommending best practices that should be followed\nProvide your review in a clear, structured format with specific examples and explanations.\nFeel free to include code snippets to illustrate your points.\nYou have an option to scrape web pages related to Python code concepts, coding conventions and design patterns in order to provide a detailed analysis of the code.\n"
REFACTOR_TASK_EXPECTED_OUTPUT="Generate classes on {topic} that could be used to eventually expand functionality with additional content."

SW_TESTER_TASK_DESCRIPTION="### Instruction ###\nGenerate Python code for {topic}.\nFocus on pytest unit and functional tests using Selenium.\n"
SW_TESTER_TASK_EXPECTED_OUTPUT="Generate pytest code regarding {topic}."

DEVOPS_TASK_DESCRIPTION="### Instruction ###\nGenerate Python code for {topic}.\nFocus on pytest unit and functional tests using Selenium.\n"
DEVOPS_TASK_EXPECTED_OUTPUT="Generate pytest code regarding {topic}."

# Configuration constants
SELENIUM_SCRAPER_WAIT_TIME=30

# Agent config
AGENT_MODEL_NAME="claude-3-sonnet-20240229"
AGENT_TEMPERATURE=0.3
AGENT_MAX_TOKENS=8192
AGENT_STREAMING=True
AGENT_TOP_P=1.0
AGENT_FREQUENCY_PENALTY=0
AGENT_PRESENCE_PENALTY=0
AGENT_N=1
AGENT_BEST_OF=1
AGENT_MAX_RETRIES=5

# Manager config
MANAGER_MODEL_NAME="claude-3-sonnet-20240229"
MANAGER_TEMPERATURE=0.5
MANAGER_MAX_TOKENS=8192
MANAGER_STREAMING=True
MANAGER_TOP_P=1.0
MANAGER_FREQUENCY_PENALTY=0
MANAGER_PRESENCE_PENALTY=0
MANAGER_N=1
MANAGER_BEST_OF=1
MANAGER_MAX_RETRIES=5

REFERENCE_MODELS=["claude-3-sonnet-20240229"]
AGGREGATOR_MODEL="mistralai/Mixtral-8x22B-Instruct-v0.1"
AGGREGATOR_PROMPT="You have been provided with a set of responses from various open-source models... Your task is to synthesize these responses into a single, high-quality response."

DEFAULT_TEMPERATURE=0.2
DEFAULT_MAX_TOKENS=2048
