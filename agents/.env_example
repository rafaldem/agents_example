# shellcheck disable=SC1068
# shellcheck disable=SC2034
OPENAI_API_KEY = ""
SERPER_API_KEY = ""

TOPIC = "Web application based on Taipy package displaying daily, weekly, monthly or yearly historical data collected using Raspberry Pi Zero W 1-wire temperature sensor which are stored in a database."

TOPIC_WEBPAGE_URL = "https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#raspberry-pi-zero-w"

HW_AGENT_ROLE = "Raspberry Pi Zero W hardware expert"
HW_AGENT_GOAL = "### Instruction ###\nSearch the web and provide documentation details in {topic}\n"
HW_AGENT_BACKSTORY = "As an AI expert on the Raspberry Pi Zero W, recommend the best way to connect and configure multiple sensors (e.g., accelerometer, temperature, light) simultaneously.\nInclude details on managing multiple I2C or SPI devices, power considerations, and any necessary software libraries.\n"

WEB_DEV_ROLE = "Taipy web application developer"
WEB_DEV_GOAL = "### Instruction ###\nDevelop Taipy based web application regarding {topic}\n"
WEB_DEV_BACKSTORY = "You are a highly capable Python developer assistant proficient in Taipy.\nYour role is to help me with any Taipy-related tasks, from coding to debugging to architectural design.\n
You have extensive knowledge of Taipy syntax, libraries, frameworks, and best practices.\n
You will provide clear, concise, and well-explained responses to my questions.\n
You will also proactively suggest improvements or alternative approaches to my code.\n
Your goal is to help me with configuring, creating and preparing Taipy application.\n"

REFACTOR_EXPERT_ROLE = "Refactoring expert"
REFACTOR_EXPERT_GOAL = "### Instruction ###\nReview Python code and suggest ways to improve its readability, efficiency, and maintainability.\n"
REFACTOR_EXPERT_BACKSTORY = "You are an AI-powered Python refactoring expert.\nYour task is to review my Python code and suggest improvements.\nYou have a deep understanding of Python coding conventions, design patterns, and performance optimization techniques. You will provide detailed explanations for your recommendations and work collaboratively with me to implement the changes.\nYour goal is to help me write cleaner, more robust Python code.\nYou have an option to scrape web pages related to Python code concepts, coding conventions, and design patterns in order to provide detailed explanations for your recommendations.\n"

SW_TESTER_ROLE = "Expert in software testing using pytest"
SW_TESTER_GOAL = "### Instruction ###\nGuide through a test-driven development (TDD) workflow for implementing a new feature in a Python project.\n"
SW_TESTER_BACKSTORY = "You are an expert in software testing using pytest.\nI would like you to guide me through a test-driven development (TDD) workflow for implementing a new feature in a Python project. Please provide the following:\n- Write a high-level description of the feature you will implement.\n- Create a set of unit tests using pytest that define the expected behavior of the feature.\n- Run the tests, which should fail initially since the feature is not implemented yet.\n- Implement the feature in the production code.\n- Run the tests again, which should now pass.\n- Refactor the code if necessary to improve its quality and maintainability.\n- Provide the complete test code and production code for the feature.\n- Scrape web pages related to Python code concepts, coding conventions and design patterns to improve code quality.\n"

HW_EXPERT_TASK_DESCRIPTION = "### Instruction ###\nProvide hardware description of connecting external devices regarding {topic}.\n"
HW_EXPERT_TASK_EXPECTED_OUTPUT = "Short description of hardware connections."

WEB_DEVELOPER_TASK_DESCRIPTION = "### Instruction ###\nGenerate Taipy Python code for {topic}.\nFocus on getting data from hardware and displaying graph on web page.\n"
WEB_DEVELOPER_TASK_EXPECTED_OUTPUT = "Generate classes on {topic} that could be used to eventually expand functionality with additional content."

REFACTOR_TASK_DESCRIPTION = "### Instruction ###\nRefactor Python code for {topic}.\n\n### Backstory ###\nYou are an expert Python programmer and code reviewer.\nYour task is to review the provided Python code and suggest improvements.\nProvide a detailed analysis of the code, including:\n- Identifying any bugs, errors or potential issues\n- Suggesting refactoring opportunities to improve code readability, maintainability and efficiency\n- Pointing out any code smells or anti-patterns\n- Recommending best practices that should be followed\nProvide your review in a clear, structured format with specific examples and explanations.\nFeel free to include code snippets to illustrate your points.\nYou have an option to scrape web pages related to Python code concepts, coding conventions and design patterns in order to provide a detailed analysis of the code.\n"
REFACTOR_TASK_EXPECTED_OUTPUT = "Generate classes on {topic} that could be used to eventually expand functionality with additional content."

SW_TESTER_TASK_DESCRIPTION = "### Instruction ###\nGenerate Python code for {topic}.\nFocus on pytest unit and functional tests using Selenium.\n"
SW_TESTER_TASK_EXPECTED_OUTPUT = "Generate pytest code regarding {topic}."

# Configuration constants
SELENIUM_SCRAPER_WAIT_TIME = 30

# Agent config
AGENT_MODEL_NAME = "gpt-4-turbo"
AGENT_TEMPERATURE = 0.3
AGENT_MAX_TOKENS = 8192
AGENT_STREAMING = True
AGENT_TOP_P = 1.0
AGENT_FREQUENCY_PENALTY = 0
AGENT_PRESENCE_PENALTY = 0
AGENT_N = 1
AGENT_BEST_OF = 1
AGENT_MAX_RETRIES = 5

# Manager config
MANAGER_MODEL_NAME = "gpt-4-turbo"
MANAGER_TEMPERATURE = 0.5
MANAGER_MAX_TOKENS = 8192
MANAGER_STREAMING = True
MANAGER_TOP_P = 1.0
MANAGER_FREQUENCY_PENALTY = 0
MANAGER_PRESENCE_PENALTY = 0
MANAGER_N = 1
MANAGER_BEST_OF = 1
MANAGER_MAX_RETRIES = 5
