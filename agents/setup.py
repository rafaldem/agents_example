from env_file import get_env


# Environment variables
ENVS = get_env()

# Core topic configuration
TOPIC = ENVS.get('TOPIC')
TOPIC_WEBPAGE_URL = ENVS.get('TOPIC_WEBPAGE_URL')

# Hardware Agent Configuration
HW_AGENT_CONTEXT = ENVS.get('HW_AGENT_CONTEXT')
HW_AGENT_ROLE = ENVS.get('HW_AGENT_ROLE')
HW_AGENT_ACTION = ENVS.get('HW_AGENT_ACTION')
HW_AGENT_FORMAT = ENVS.get('HW_AGENT_FORMAT')

# Web Development Agent Configuration
WEB_DEV_CONTEXT = ENVS.get('WEB_DEV_CONTEXT')
WEB_DEV_ROLE = ENVS.get('WEB_DEV_ROLE')
WEB_DEV_ACTION = ENVS.get('WEB_DEV_ACTION')
WEB_DEV_FORMAT = ENVS.get('WEB_DEV_FORMAT')

# Refactor Expert Configuration
REFACTOR_CONTEXT = ENVS.get('REFACTOR_CONTEXT')
REFACTOR_EXPERT_ROLE = ENVS.get('REFACTOR_EXPERT_ROLE')
REFACTOR_EXPERT_ACTION = ENVS.get('REFACTOR_EXPERT_ACTION')
REFACTOR_EXPERT_FORMAT = ENVS.get('REFACTOR_EXPERT_FORMAT')

# Software Tester Configuration
SW_TESTER_CONTEXT = ENVS.get('SW_TESTER_CONTEXT')
SW_TESTER_ROLE = ENVS.get('SW_TESTER_ROLE')
SW_TESTER_ACTION = ENVS.get('SW_TESTER_ACTION')
SW_TESTER_FORMAT = ENVS.get('SW_TESTER_FORMAT')

# DevOps Configuration
DEVOPS_CONTEXT = ENVS.get('DEVOPS_CONTEXT')
DEVOPS_ROLE = ENVS.get('DEVOPS_ROLE')
DEVOPS_ACTION = ENVS.get('DEVOPS_ACTION')
DEVOPS_FORMAT = ENVS.get('DEVOPS_FORMAT')

# Task Descriptions and Expected Outputs
HW_EXPERT_TASK_DESCRIPTION = ENVS.get('HW_EXPERT_TASK_DESCRIPTION')
HW_EXPERT_TASK_EXPECTED_OUTPUT = ENVS.get('HW_EXPERT_TASK_EXPECTED_OUTPUT')

WEB_DEVELOPER_TASK_DESCRIPTION = ENVS.get('WEB_DEVELOPER_TASK_DESCRIPTION')
WEB_DEVELOPER_TASK_EXPECTED_OUTPUT = ENVS.get('WEB_DEVELOPER_TASK_EXPECTED_OUTPUT')

SW_TESTER_TASK_DESCRIPTION = ENVS.get('SW_TESTER_TASK_DESCRIPTION')
SW_TESTER_TASK_EXPECTED_OUTPUT = ENVS.get('SW_TESTER_TASK_EXPECTED_OUTPUT')

REFACTOR_TASK_DESCRIPTION = ENVS.get('REFACTOR_TASK_DESCRIPTION')
REFACTOR_TASK_EXPECTED_OUTPUT = ENVS.get('REFACTOR_TASK_EXPECTED_OUTPUT')

DEVOPS_TASK_DESCRIPTION = ENVS.get('DEVOPS_TASK_DESCRIPTION')
DEVOPS_TASK_EXPECTED_OUTPUT = ENVS.get('DEVOPS_TASK_EXPECTED_OUTPUT')

# Configuration constants
SELENIUM_SCRAPER_WAIT_TIME = ENVS.get('SELENIUM_SCRAPER_WAIT_TIME')

# Agent model configuration
AGENT_MODEL_NAME = ENVS.get('AGENT_MODEL_NAME')
AGENT_TEMPERATURE = ENVS.get('AGENT_TEMPERATURE')
AGENT_MAX_TOKENS = ENVS.get('AGENT_MAX_TOKENS')
AGENT_STREAMING = ENVS.get('AGENT_STREAMING')
AGENT_TOP_P = ENVS.get('AGENT_TOP_P')
AGENT_FREQUENCY_PENALTY = ENVS.get('AGENT_FREQUENCY_PENALTY')
AGENT_PRESENCE_PENALTY = ENVS.get('AGENT_PRESENCE_PENALTY')
AGENT_N = ENVS.get('AGENT_N')
AGENT_BEST_OF = ENVS.get('AGENT_BEST_OF')
AGENT_MAX_RETRIES = ENVS.get('AGENT_MAX_RETRIES')

# Manager model configuration
MANAGER_MODEL_NAME = ENVS.get('MANAGER_MODEL_NAME')
MANAGER_TEMPERATURE = ENVS.get('MANAGER_TEMPERATURE')
MANAGER_MAX_TOKENS = ENVS.get('MANAGER_MAX_TOKENS')
MANAGER_STREAMING = ENVS.get('MANAGER_STREAMING')
MANAGER_TOP_P = ENVS.get('MANAGER_TOP_P')
MANAGER_FREQUENCY_PENALTY = ENVS.get('MANAGER_FREQUENCY_PENALTY')
MANAGER_PRESENCE_PENALTY = ENVS.get('MANAGER_PRESENCE_PENALTY')
MANAGER_N = ENVS.get('MANAGER_N')
MANAGER_BEST_OF = ENVS.get('MANAGER_BEST_OF')
MANAGER_MAX_RETRIES = ENVS.get('MANAGER_MAX_RETRIES')

# Legacy support for existing functionality
CREW_OUTPUT_FILE = r"output.txt"

# Reference models and aggregation configuration
REFERENCE_MODELS = ENVS.get('REFERENCE_MODELS', '').split(',') if ENVS.get('REFERENCE_MODELS') else []
AGGREGATOR_MODEL = ENVS.get('AGGREGATOR_MODEL')
AGGREGATOR_PROMPT = ENVS.get('AGGREGATOR_PROMPT')

# Default model parameters
DEFAULT_TEMPERATURE = float(ENVS.get('DEFAULT_TEMPERATURE', 0.2))
DEFAULT_MAX_TOKENS = int(ENVS.get('DEFAULT_MAX_TOKENS', 2048))

# Sequential execution configuration
SEQUENTIAL_EXECUTION_ENABLED = ENVS.get('SEQUENTIAL_EXECUTION_ENABLED', 'True').lower() == 'true'
EXECUTION_DELAY_SECONDS = float(ENVS.get('EXECUTION_DELAY_SECONDS', 1.0))
SAVE_INTERMEDIATE_RESULTS = ENVS.get('SAVE_INTERMEDIATE_RESULTS', 'True').lower() == 'true'
